{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "92290f7e-0bb2-400f-9131-588499f87b05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    support                   itemsets\n",
      "0       0.8                     (Roti)\n",
      "1       0.8                     (Susu)\n",
      "2       0.4                     (Keju)\n",
      "3       0.8                    (Telur)\n",
      "4       0.8                     (Buah)\n",
      "5       0.6               (Susu, Roti)\n",
      "6       0.4               (Roti, Keju)\n",
      "7       0.6              (Roti, Telur)\n",
      "8       0.6               (Roti, Buah)\n",
      "9       0.8              (Susu, Telur)\n",
      "10      0.6               (Susu, Buah)\n",
      "11      0.4               (Buah, Keju)\n",
      "12      0.6              (Buah, Telur)\n",
      "13      0.6        (Susu, Roti, Telur)\n",
      "14      0.4         (Susu, Roti, Buah)\n",
      "15      0.4         (Roti, Buah, Keju)\n",
      "16      0.4        (Roti, Buah, Telur)\n",
      "17      0.6        (Susu, Buah, Telur)\n",
      "18      0.4  (Susu, Roti, Buah, Telur)\n",
      "            antecedents          consequents  antecedent support  \\\n",
      "0                (Roti)               (Keju)                 0.8   \n",
      "1                (Keju)               (Roti)                 0.4   \n",
      "2                (Susu)              (Telur)                 0.8   \n",
      "3               (Telur)               (Susu)                 0.8   \n",
      "4                (Buah)               (Keju)                 0.8   \n",
      "5                (Keju)               (Buah)                 0.4   \n",
      "6          (Susu, Roti)              (Telur)                 0.6   \n",
      "7         (Roti, Telur)               (Susu)                 0.6   \n",
      "8                (Susu)        (Roti, Telur)                 0.8   \n",
      "9               (Telur)         (Susu, Roti)                 0.8   \n",
      "10         (Roti, Buah)               (Keju)                 0.6   \n",
      "11         (Roti, Keju)               (Buah)                 0.4   \n",
      "12         (Buah, Keju)               (Roti)                 0.4   \n",
      "13               (Roti)         (Buah, Keju)                 0.8   \n",
      "14               (Buah)         (Roti, Keju)                 0.8   \n",
      "15               (Keju)         (Roti, Buah)                 0.4   \n",
      "16         (Susu, Buah)              (Telur)                 0.6   \n",
      "17        (Buah, Telur)               (Susu)                 0.6   \n",
      "18               (Susu)        (Buah, Telur)                 0.8   \n",
      "19              (Telur)         (Susu, Buah)                 0.8   \n",
      "20   (Susu, Roti, Buah)              (Telur)                 0.4   \n",
      "21  (Roti, Buah, Telur)               (Susu)                 0.4   \n",
      "22         (Susu, Roti)        (Buah, Telur)                 0.6   \n",
      "23         (Susu, Buah)        (Roti, Telur)                 0.6   \n",
      "24        (Roti, Telur)         (Susu, Buah)                 0.6   \n",
      "25        (Buah, Telur)         (Susu, Roti)                 0.6   \n",
      "26               (Susu)  (Roti, Buah, Telur)                 0.8   \n",
      "27              (Telur)   (Susu, Roti, Buah)                 0.8   \n",
      "\n",
      "    consequent support  support  confidence      lift  leverage  conviction  \\\n",
      "0                  0.4      0.4    0.500000  1.250000      0.08         1.2   \n",
      "1                  0.8      0.4    1.000000  1.250000      0.08         inf   \n",
      "2                  0.8      0.8    1.000000  1.250000      0.16         inf   \n",
      "3                  0.8      0.8    1.000000  1.250000      0.16         inf   \n",
      "4                  0.4      0.4    0.500000  1.250000      0.08         1.2   \n",
      "5                  0.8      0.4    1.000000  1.250000      0.08         inf   \n",
      "6                  0.8      0.6    1.000000  1.250000      0.12         inf   \n",
      "7                  0.8      0.6    1.000000  1.250000      0.12         inf   \n",
      "8                  0.6      0.6    0.750000  1.250000      0.12         1.6   \n",
      "9                  0.6      0.6    0.750000  1.250000      0.12         1.6   \n",
      "10                 0.4      0.4    0.666667  1.666667      0.16         1.8   \n",
      "11                 0.8      0.4    1.000000  1.250000      0.08         inf   \n",
      "12                 0.8      0.4    1.000000  1.250000      0.08         inf   \n",
      "13                 0.4      0.4    0.500000  1.250000      0.08         1.2   \n",
      "14                 0.4      0.4    0.500000  1.250000      0.08         1.2   \n",
      "15                 0.6      0.4    1.000000  1.666667      0.16         inf   \n",
      "16                 0.8      0.6    1.000000  1.250000      0.12         inf   \n",
      "17                 0.8      0.6    1.000000  1.250000      0.12         inf   \n",
      "18                 0.6      0.6    0.750000  1.250000      0.12         1.6   \n",
      "19                 0.6      0.6    0.750000  1.250000      0.12         1.6   \n",
      "20                 0.8      0.4    1.000000  1.250000      0.08         inf   \n",
      "21                 0.8      0.4    1.000000  1.250000      0.08         inf   \n",
      "22                 0.6      0.4    0.666667  1.111111      0.04         1.2   \n",
      "23                 0.6      0.4    0.666667  1.111111      0.04         1.2   \n",
      "24                 0.6      0.4    0.666667  1.111111      0.04         1.2   \n",
      "25                 0.6      0.4    0.666667  1.111111      0.04         1.2   \n",
      "26                 0.4      0.4    0.500000  1.250000      0.08         1.2   \n",
      "27                 0.4      0.4    0.500000  1.250000      0.08         1.2   \n",
      "\n",
      "    zhangs_metric  \n",
      "0        1.000000  \n",
      "1        0.333333  \n",
      "2        1.000000  \n",
      "3        1.000000  \n",
      "4        1.000000  \n",
      "5        0.333333  \n",
      "6        0.500000  \n",
      "7        0.500000  \n",
      "8        1.000000  \n",
      "9        1.000000  \n",
      "10       1.000000  \n",
      "11       0.333333  \n",
      "12       0.333333  \n",
      "13       1.000000  \n",
      "14       1.000000  \n",
      "15       0.666667  \n",
      "16       0.500000  \n",
      "17       0.500000  \n",
      "18       1.000000  \n",
      "19       1.000000  \n",
      "20       0.333333  \n",
      "21       0.333333  \n",
      "22       0.250000  \n",
      "23       0.250000  \n",
      "24       0.250000  \n",
      "25       0.250000  \n",
      "26       1.000000  \n",
      "27       1.000000  \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Lenovo\\anaconda3\\Lib\\site-packages\\mlxtend\\frequent_patterns\\fpcommon.py:109: DeprecationWarning: DataFrames with non-bool types result in worse computationalperformance and their support might be discontinued in the future.Please use a DataFrame with bool type\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from mlxtend.frequent_patterns import apriori, association_rules\n",
    "\n",
    "# Data transaksi\n",
    "data = {\n",
    "    'Roti': [1, 1, 1, 0, 1],\n",
    "    'Susu': [1, 0, 1, 1, 1],\n",
    "    'Keju': [0, 1, 1, 0, 0],\n",
    "    'Telur': [1, 0, 1, 1, 1],\n",
    "    'Buah': [0, 1, 1, 1, 1]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Menghasilkan frequent itemsets\n",
    "frequent_itemsets = apriori(df, min_support=0.4, use_colnames=True)\n",
    "\n",
    "# Menghasilkan aturan asosiasi\n",
    "rules = association_rules(frequent_itemsets, metric=\"lift\", min_threshold=1)\n",
    "\n",
    "# Menampilkan hasil\n",
    "print(frequent_itemsets)\n",
    "print(rules)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "82ea7965-e10f-4cc1-a07c-6ac879f4d7e9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
